[
  {
    "name": "source.java",
    "path": "source.java",
    "content": {
      "structured": {
        "description": "Various functional programming concepts and demonstrates their usage through several lambda expressions and higher-order functions. These include a `Runnable` that prints a message to the console, a `BinaryOperation` that calculates the sum of two integers, a `List` of strings processed using a `Predicate`, and a `Consumer` that converts strings to uppercase. The code showcases the concise and flexible nature of lambda expressions in Java.",
        "items": [
          {
            "id": "7f6e735f-ebe9-0aad-bc41-60a8e4e92107",
            "ancestors": [],
            "description": "Demonstrates various functional programming concepts using lambdas, higher-order functions, and stream processing. The class defines a `Runnable` instance that prints \"Hello, Lambda!\" when run, a binary operation that calculates the sum of two integers, and processes a list of strings using different functional interfaces.",
            "name": "LambdaDemo",
            "location": {
              "start": 14,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 49,
            "docLength": 8
          },
          {
            "id": "430c5aaf-0a33-e2a2-8748-6e598bc18125",
            "ancestors": [
              "7f6e735f-ebe9-0aad-bc41-60a8e4e92107"
            ],
            "description": "Demonstrates various concepts in Java, including lambdas, method references, streams, and Predicate/Consumer interfaces. It prints \"Hello, Lambda!\" using a lambda expression, calculates the sum of 5 and 3 using a method reference, lists the names \"Alice\", \"Bob\", and \"Charlie\", filters them based on a Predicate to obtain names starting with 'A', and prints the uppercase versions of the names using Consumers.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "program's command line arguments, which is not utilized in this code snippet.\n\n* Length: `args.length` is equal to 0 or 1.\n* Elements: Each element in `args` is a String.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 32,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 15,
                "end": 31
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 16
          },
          {
            "id": "8c3f9fff-26c6-25b1-994d-fee7a1994473",
            "ancestors": [
              "7f6e735f-ebe9-0aad-bc41-60a8e4e92107"
            ],
            "description": "Defines a method to calculate an integer result for two input integers.",
            "name": "BinaryOperation",
            "location": {
              "start": 59,
              "insert": 55,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 54,
                "end": 58
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  }
]
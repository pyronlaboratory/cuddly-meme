[
  {
    "name": "source.java",
    "path": "source.java",
    "content": {
      "structured": {
        "description": "Various functional programming concepts using lambda expressions and streams processing. It includes a `Runnable` that prints a message, a `BinaryOperation` that calculates the sum of two integers, a `List` of strings processed by a `Predicate`, and a `Consumer` that converts strings to uppercase. These lambda expressions allow for concise and flexible code execution.",
        "items": [
          {
            "id": "9c530f56-9cd8-878f-d54a-f1530190a185",
            "ancestors": [],
            "description": "Demonstrates functional programming concepts using lambdas, higher-order functions, and stream processing. The class includes a `Runnable` that prints a message, a `BinaryOperation` for calculating the sum of two integers, a list of strings processed with various interfaces, and a `Consumer` that converts strings to uppercase. These lambda expressions enable concise and flexible code execution.",
            "name": "LambdaDemo",
            "location": {
              "start": 14,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 5,
                "end": 13
              }
            },
            "item_type": "class",
            "length": 49,
            "docLength": 8
          },
          {
            "id": "239d7ae6-74d8-7a85-904c-0ca8d4e7b1a3",
            "ancestors": [
              "9c530f56-9cd8-878f-d54a-f1530190a185"
            ],
            "description": "Demonstrates several features of Java programming language, including lambda expressions, method references, streams, and consumers. Lambda expression `hello` prints \"Hello, Lambda!\", while method reference `add` performs addition and calculates the result. The `names` list is processed using `forEach()` and `stream().filter()`.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "0 or more command-line arguments passed to the `main` function when it is executed directly from the command line, allowing the program to handle user input and execute accordingly.\n\n* Length: `args.length` = number of command-line arguments passed to the program.\n* Elements: Each element in `args` is a string representing a command-line argument.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 32,
              "insert": 16,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 15,
                "end": 31
              }
            },
            "item_type": "method",
            "length": 22,
            "docLength": 16
          },
          {
            "id": "484ff94d-4f92-ccab-f444-f702227c473c",
            "ancestors": [
              "9c530f56-9cd8-878f-d54a-f1530190a185"
            ],
            "description": "Defines an integer result calculation method for two input integers.",
            "name": "BinaryOperation",
            "location": {
              "start": 59,
              "insert": 55,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 54,
                "end": 58
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  }
]
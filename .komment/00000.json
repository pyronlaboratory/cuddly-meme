[
  {
    "name": "source.java",
    "path": "source.java",
    "content": {
      "structured": {
        "description": "Three examples of lambda expressions: A `Runnable` that prints \"Hello, Lambda!\" when run; a `BinaryOperation` that calculates the sum of two integers; and a `Predicate` that filters a list of strings based on their starting character. Additionally, it demonstrates how to use the `forEach()` method to apply a consumer function to an arraylist of strings in uppercase.",
        "items": [
          {
            "id": "52c1a909-eb02-c3be-9149-353642830240",
            "ancestors": [],
            "description": "Has a main method that demonstrates various lambda expressions and their usage in functional programming. The class includes a `Runnable` that prints a message to the console, a `BinaryOperation` that calculates the sum of two integers, a `List` of strings that are processed using a `Predicate`, and a `Consumer` that converts strings to uppercase. These lambda expressions allow for concise and flexible code execution.",
            "name": "LambdaDemo",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 29,
            "docLength": null
          },
          {
            "id": "f3848af9-bdf1-5485-2641-8e8cef8b8000",
            "ancestors": [
              "52c1a909-eb02-c3be-9149-353642830240"
            ],
            "description": "Demonstrates various functional programming concepts in Java, including lambdas, higher-order functions, and stream processing. Lambda expressions are used to create a `Runnable` instance that prints \"Hello, Lambda!\" when run, while the `add` method is a binary operation that takes two arguments and returns their sum. The `names` list is processed using various functional interfaces, such as `List<String>.forEach()` and `Stream.filter()`.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "1-dimensional array of command-line arguments passed to the `main` function by the Java runtime when the program is launched directly from the command line, and it is ignored in this case as no operation is performed on it.\n\n* `args`: an array of strings representing command-line arguments passed to the program.\n* Length: varies (can be zero or more than zero).\n* Elements: each element is a string representing a separate argument.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "e52cef9b-622c-a7b6-5c47-df9e4c3c58aa",
            "ancestors": [
              "52c1a909-eb02-c3be-9149-353642830240"
            ],
            "description": "Defines a single method, calculate(int, int), which calculates an integer result for two input integers.",
            "name": "BinaryOperation",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "interface",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  }
]
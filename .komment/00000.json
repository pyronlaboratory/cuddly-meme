[
  {
    "name": "source.java",
    "path": "source.java",
    "content": {
      "structured": {
        "description": "Several functionalities: It introduces a `Runnable` object that prints \"Hello, Lambda!\" when run, defines an `add` method that performs addition and calculates its result, creates a list of strings and applies various filtering methods to it, and implements an interface `BinaryOperation` which defines an int-based calculation method.",
        "items": [
          {
            "id": "22ffe40e-a33e-72b9-514d-a51ba254f75e",
            "ancestors": [],
            "description": "Defines several methods and interfaces, including a `Runnable` for printing a message, a `BinaryOperation` interface for calculating an integer result, and a `Predicate` and `Consumer` for manipulating lists of strings. These methods demonstrate the use of lambda expressions in Java for creating concise and expressive code.",
            "name": "Lambda",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 32,
            "docLength": null
          },
          {
            "id": "51a2d681-c6bc-5f83-194b-a443e0514cc8",
            "ancestors": [
              "22ffe40e-a33e-72b9-514d-a51ba254f75e"
            ],
            "description": "Demonstrates various concepts in Java programming, including lambda expressions, method references, streams, and consumer functions. Lambda expressions are used to create a `Runnable` object that prints \"Hello, Lambda!\", while method references are employed to implement an addition operator that takes two integers as input and returns their sum. Streams are used to filter a list of strings based on a provided predicate function, and consumer functions are applied to print the uppercase versions of each string in a list.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "0 or more command-line arguments passed to the program, which are ignored in this case.\n\n* Length: The `args` array has 0 or more elements, depending on the command-line arguments passed to the program.\n* Elements: Each element in the `args` array is a string representing a command-line argument.\n* Types: Each element in the `args` array can hold any type of string value.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          },
          {
            "id": "41b035eb-bffc-a6b1-ee43-c4a01a048d5a",
            "ancestors": [
              "22ffe40e-a33e-72b9-514d-a51ba254f75e"
            ],
            "description": "Defines an operation that takes two integers and returns their integer result.",
            "name": "BinaryOperation",
            "location": {
              "start": 33,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 28,
                "end": 32
              }
            },
            "item_type": "interface",
            "length": 3,
            "docLength": 4
          }
        ]
      }
    }
  }
]